// ----------------------------------------------------------------------------
// --- Domain definitions
//
// time: the domain of time-points
// fluent: the domain of fluents, that is composite events (CE)
// event: the domain of events, that is the input simple, derived events (SDE)
// id: domain entities, e.g. persons or objects
// ----------------------------------------------------------------------------

// Query Predicates (open-world assumption):
HoldsAt(fluent, time) 

// Hidden Predicates (open-world assumption):
InitiatedAt(fluent, time)
TerminatedAt(fluent, time)

// Evidence Predicates (closed-world assumption):
Happens(event, time)
Close(id, id, dist, time)
OrientationMove(id, id, time)
Next(time, time)
StartTime(time)

// Function definitions for simple, derived events (SDE):
event enter(id)
event exit(id)
event walking(id)
event running(id)
event active(id)
event inactive(id)

// Function definitions for composite events (CE):
fluent meet(id, id)

// ----------------------------------------------------------------------------
// --- Probabilistic Event Calculus (domain-independent axioms)
// ----------------------------------------------------------------------------

// When a fluent holds:
Next(t1, t0) ^ InitiatedAt(f, t0) => HoldsAt(f, t1).

// When a fluent does not hold:
Next(t1, t0) ^ TerminatedAt(f, t0) => !HoldsAt(f, t1).

// The inertia of holdsAt, i.e. a fluent continues to hold unless it is terminated:
Next(t1, t0) ^ HoldsAt(f, t0) ^ !TerminatedAt(f, t0) => HoldsAt(f, t1).

// The inertia of !holdsAt, i.e. a fluent continues not to hold unless it is initiated:
Next(t1, t0) ^ !HoldsAt(f, t0) ^ !InitiatedAt(f, t0) => !HoldsAt(f, t1).


// ---------------------------------------------------------------------------- 
// --- The CE definition of the 'meeting' activity (domain-dependent)
// ---------------------------------------------------------------------------- 

// --- Initiate meeting:
InitiatedAt(meet(p1, p2), t) :- Happens(active(p1), t) ^ !Happens(running(p2), t) ^ Close(p1, p2, 25, t)

// --- Initiate meeting:
InitiatedAt(meet(p1, p2), t) :- Happens(inactive(p1), t) ^ !Happens(running(p2), t) ^ !Happens(active(p2), t) ^ Close(p1, p2, 25, t)


// --- Terminate meeting: walking
TerminatedAt(meet(p1, p2), t) :- Happens(walking(p1), t) ^ !Close(p1, p2, 34, t)
TerminatedAt(meet(p1, p2), t) :- Happens(walking(p2), t) ^ !Close(p2, p1, 34, t)


// --- Terminate meeting: running
TerminatedAt(meet(p1, p2), t) :- Happens(running(p1), t)
TerminatedAt(meet(p1, p2), t) :- Happens(running(p2), t)


// --- Terminate meeting: exit
TerminatedAt(meet(p1, p2), t) :- Happens(exit(p1), t)
TerminatedAt(meet(p1, p2), t) :- Happens(exit(p2), t)

// ---------------------------------------------------------------------------- 
// --- Other domain-dependent rules
// ---------------------------------------------------------------------------- 

// --- The meeting CE cannot performed by a single person:
!HoldsAt(meet(p, p), t).

// --- Initially nothing holds
StartTime(t) => !HoldsAt(f, t).
